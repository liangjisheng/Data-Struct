//图的建立及深度优先遍历
#include"stdio.h"
#include"stdlib.h"
#define vertexnum 9
struct node
{
	int vertex;
	struct node *next;
};
typedef struct node *graph;
struct node head[vertexnum];
int visited[vertexnum];
//深度优先搜索
void DFS(int vertex)
{
	graph po;
	visited[vertex]=1;
	printf("[%d]==>",vertex);
	po=head[vertex].next;
	while(po!=NULL)
	{
		if(visited[po->vertex]==0)
			DFS(po->vertex);
		po=po->next;
	}
}
//建立图的邻接列表
void create_graph(int source,int destination)
{
	graph newnode,po=&head[source];
	newnode=(graph)malloc(sizeof(struct node));
	newnode->vertex=destination;
	newnode->next=NULL;
	while(po->next!=NULL)
		po=po->next;
	po->next=newnode;
}
//输出图的邻接列表
void print_graph(graph head)
{
	graph po=head->next;
	while(po!=NULL)
	{
		printf("[%d]",po->vertex);
		po=po->next;
	}
	printf("\n");
}
//主程序
void main()
{
	int i,j,node[20][2];
	printf("input the node[20][2]:\n");
	for(i=0;i<20;i++)
		for(j=0;j<2;j++)
			scanf("%d",&node[i][j]);
	for(i=0;i<vertexnum;i++)
	{
		head[i].next=NULL;
		head[i].vertex=i;
	}
	for(i=0;i<vertexnum;i++)
		visited[i]=0;
	for(i=0;i<20;i++)
		create_graph(node[i][0],node[i][1]);
	printf("##Graph##\n");
	for(i=1;i<vertexnum;i++)
	{
		printf("vertex[%d]:",i);
		print_graph(&head[i]);
	}
	printf("Depth-First-Search:\n");
	printf("[begin]==>");
	DFS(1);
	printf("[end]==>\n");
}